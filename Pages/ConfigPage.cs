using HomeSeerAPI;
using Hspi.Utils;
using NullGuard;
using Scheduler;
using System;
using System.Collections.Immutable;
using System.Collections.Specialized;
using System.Globalization;
using System.IO;
using System.Text;
using System.Web;
using static System.FormattableString;
using CameraProperty = Hspi.Camera.Hikvision.Isapi.CameraProperty;
using HikCameraSetting = Hspi.Camera.Hikvision.Isapi.CameraSettings;
using OnvifCameraSetting = Hspi.Camera.Onvif.CameraSettings;

namespace Hspi.Pages
{
    /// <summary>
    /// Helper class to generate configuration page for plugin
    /// </summary>
    /// <seealso cref="Scheduler.PageBuilderAndMenu.clsPageBuilder" />
    [NullGuard(ValidationFlags.Arguments | ValidationFlags.NonPublic)]
    internal partial class ConfigPage : PageHelper
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigPage" /> class.
        /// </summary>
        /// <param name="HS">The hs.</param>
        /// <param name="pluginConfig">The plugin configuration.</param>
        public ConfigPage(IHSApplication HS, PluginConfig pluginConfig) : base(HS, pluginConfig, Name)
        {
        }

        protected enum PageType
        {
            Default,
            AddHikvisionIsapiCamera,
            EditHikvisionIsapiCamera,
            AddHikvisionIsapiCameraProperty,
            EditHikvisionIsapiCameraProperty,
            AddOnvifCamera,
            EditOnvifCamera,
        };

        /// <summary>
        /// Gets the name of the web page.
        /// </summary>
        public static string Name => pageName;

        /// <summary>
        /// Get the web page string for the configuration page.
        /// </summary>
        /// <returns>
        /// System.String.
        /// </returns>
        public string GetWebPage(string queryString)
        {
            try
            {
                reset();
                UsesJqAll = false;

                NameValueCollection parts = HttpUtility.ParseQueryString(queryString);

                if (Enum.TryParse<PageType>(parts[PageTypeId], true, out var pageType))
                {
                    return GetWebPage(pageType, parts);
                }
                else
                {
                    return GetWebPage(PageType.Default, parts);
                }
            }
            catch (Exception)
            {
                return "error";
            }
        }

        /// <summary>
        /// The user has selected a control on the configuration web page.
        /// The post data is provided to determine the control that initiated the post and the state of the other controls.
        /// </summary>
        /// <param name="data">The post data.</param>
        /// <param name="user">The name of logged in user.</param>
        /// <param name="userRights">The rights of the logged in user.</param>
        /// <returns>Any serialized data that needs to be passed back to the web page, generated by the clsPageBuilder class.</returns>
        public string PostBackProc(string data, [AllowNull]string user, int userRights)
        {
            NameValueCollection parts = HttpUtility.ParseQueryString(data);

            string form = parts["id"];

            if (form == NameToIdWithPrefix(SettingSaveButtonName))
            {
                HandleSaveMainSettingPostBack(parts);
            }
            else if ((form == NameToIdWithPrefix(HikDeleteCamera)) ||
                     (form == NameToIdWithPrefix(HikCancelCamera)) ||
                     (form == NameToIdWithPrefix(HikSaveCamera)))
            {
                HandleHikCameraPostBack(parts, form);
            }
            else if ((form == NameToIdWithPrefix(OnvifDeleteCamera)) ||
                     (form == NameToIdWithPrefix(OnvifCancelCamera)) ||
                     (form == NameToIdWithPrefix(OnvifSaveCamera)))
            {
                HandleOnvifCameraPostBack(parts, form);
            }
            else if ((form == NameToIdWithPrefix(HikDeleteCameraProperty)) ||
                     (form == NameToIdWithPrefix(HikCancelCameraProperty)) ||
                     (form == NameToIdWithPrefix(HikSaveCameraProperty)))
            {
                HandleCameraPropertyPostBack(parts, form);
            }

            return base.postBackProc(Name, data, user, userRights);
        }

        protected string GetWebPage(PageType pageType, NameValueCollection parts)
        {
            StringBuilder stb = new StringBuilder();

            switch (pageType)
            {
                case PageType.EditHikvisionIsapiCamera:
                case PageType.AddHikvisionIsapiCamera:
                    {
                        stb.Append(HS.GetPageHeader(Name, "Configuration", string.Empty, string.Empty, false, false));
                        stb.Append(PageBuilderAndMenu.clsPageBuilder.DivStart("pluginpage", string.Empty));
                        pluginConfig.HikvisionIsapiCameras.TryGetValue(parts[RecordId], out var camera);
                        stb.Append(BuildAddNewHikvisionIsapiCameraWebPageBody(camera));
                        stb.Append(PageBuilderAndMenu.clsPageBuilder.DivEnd());
                        AddBody(stb.ToString());
                        AddFooter(HS.GetPageFooter());
                        break;
                    }

                case PageType.AddOnvifCamera:
                case PageType.EditOnvifCamera:
                    {
                        stb.Append(HS.GetPageHeader(Name, "Configuration", string.Empty, string.Empty, false, false));
                        stb.Append(PageBuilderAndMenu.clsPageBuilder.DivStart("pluginpage", string.Empty));
                        pluginConfig.OnvifCameras.TryGetValue(parts[RecordId], out var camera);
                        stb.Append(BuildAddNewOnvifCameraWebPageBody(camera));
                        stb.Append(PageBuilderAndMenu.clsPageBuilder.DivEnd());
                        AddBody(stb.ToString());
                        AddFooter(HS.GetPageFooter());
                        break;
                    }

                case PageType.EditHikvisionIsapiCameraProperty:
                case PageType.AddHikvisionIsapiCameraProperty:
                    {
                        stb.Append(HS.GetPageHeader(Name, "Configuration", string.Empty, string.Empty, false, false));
                        stb.Append(PageBuilderAndMenu.clsPageBuilder.DivStart("pluginpage", string.Empty));
                        pluginConfig.HikvisionIsapiCameraProperties.TryGetValue(parts[RecordId], out var cameraProperty);
                        stb.Append(BuildAddNewCameraPropertyWebPageBody(cameraProperty));
                        stb.Append(PageBuilderAndMenu.clsPageBuilder.DivEnd());
                        AddBody(stb.ToString());
                        AddFooter(HS.GetPageFooter());
                        break;
                    }

                default:
                case PageType.Default:
                    {
                        stb.Append(HS.GetPageHeader(Name, "Configuration", string.Empty, string.Empty, false, false));
                        stb.Append(PageBuilderAndMenu.clsPageBuilder.DivStart("pluginpage", string.Empty));
                        stb.Append(BuildDefaultWebPageBody(parts));
                        stb.Append(PageBuilderAndMenu.clsPageBuilder.DivEnd());
                        AddBody(stb.ToString());
                        AddFooter(HS.GetPageFooter());
                        break;
                    }
            }

            suppressDefaultFooter = true;
            return BuildPage();
        }

        protected string PageTypeButton(string name, string label, string type, string id = null)
        {
            var b = new clsJQuery.jqButton(name, label, PageName, false)
            {
                id = NameToIdWithPrefix(name),
                url = Invariant($"/{pageUrl}?{PageTypeId}={HttpUtility.UrlEncode(type.ToString(CultureInfo.InvariantCulture))}&{RecordId}={HttpUtility.UrlEncode(id ?? string.Empty)}"),
            };

            return b.Build();
        }

        private string BuildAddNewCameraPropertyWebPageBody([AllowNull]CameraProperty cameraProperties)
        {
            string id = cameraProperties?.Id ?? Guid.NewGuid().ToString();
            string name = cameraProperties?.Name ?? string.Empty;
            string urlPath = cameraProperties?.UrlPath ?? string.Empty;
            string xpath = cameraProperties?.XPathForGet.Path.Expression ?? string.Empty;
            string values = string.Join(Environment.NewLine, cameraProperties?.StringValues ?? ImmutableSortedSet<string>.Empty);

            string buttonLabel = cameraProperties != null ? "Save" : "Add";
            string header = cameraProperties != null ? "Edit Camera Property" : "Add New Camera Property";

            StringBuilder stb = new StringBuilder();

            stb.Append(FormStart("ftmCameraPropertyChange", "IdChange", "Post"));

            stb.Append(@"<div>");
            stb.Append(@"<table class='full_width_table'>");
            stb.Append("<tr height='5'><td></td><td></td></tr>");
            stb.Append(Invariant($"<tr><td class='tableheader' colspan=2>{header}</td></tr>"));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>Name:</td><td class='tablecell'>"));
            stb.Append(HtmlTextBox(nameof(CameraProperty.Name), name));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>UrlPath:</td><td class='tablecell'>"));
            stb.Append(HtmlTextBox(nameof(CameraProperty.UrlPath), urlPath, size: 90));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>XPath:</td><td class='tablecell'>"));
            stb.Append(HtmlTextBox(nameof(CameraProperty.XPathForGet), xpath, size: 90));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>Valid string values(separated by lines):</td><td class='tablecell'>"));
            stb.Append(TextArea(nameof(CameraProperty.StringValues), values));
            stb.Append("</td></tr>");

            stb.Append(Invariant($"<tr><td colspan=2>{HtmlTextBox(RecordId, id, type: "hidden")}<div id='{SaveErrorDivId}' style='color:Red'></div></td><td></td></tr>"));
            stb.Append(Invariant($"<tr><td colspan=2>{FormPageButton(HikSaveCameraProperty, buttonLabel)}"));

            if (cameraProperties != null)
            {
                stb.Append(FormPageButton(HikDeleteCameraProperty, "Delete"));
            }

            stb.Append(FormPageButton(HikCancelCameraProperty, "Cancel"));
            stb.Append(Invariant($"</td></tr>"));
            stb.Append("<tr height='5'><td colspan=2></td></tr>");
            stb.Append(@"</table>");
            stb.Append(@"</div>");
            stb.Append(FormEnd());

            return stb.ToString();
        }

        private string BuildAddNewHikvisionIsapiCameraWebPageBody([AllowNull]HikCameraSetting cameraSettings)
        {
            TimeSpan DefaultAlarmCancelInterval = TimeSpan.FromSeconds(30);
            TimeSpan DefaultCameraPropertiesRefreshInterval = TimeSpan.FromSeconds(60);

            string id = cameraSettings?.Id ?? Guid.NewGuid().ToString();
            string name = cameraSettings?.Name ?? string.Empty;
            string hostName = cameraSettings?.CameraHost ?? @"http://";
            string userId = cameraSettings?.Login ?? string.Empty;
            string password = cameraSettings?.Password ?? string.Empty;
            string alarmCancelInterval = (cameraSettings?.AlarmCancelInterval ?? DefaultAlarmCancelInterval).TotalSeconds.ToString(CultureInfo.InvariantCulture);
            string propertiesRefreshInterval = (cameraSettings?.CameraPropertiesRefreshInterval ?? DefaultCameraPropertiesRefreshInterval).TotalSeconds.ToString(CultureInfo.InvariantCulture);
            string snapshotDownloadDirectory = cameraSettings?.SnapshotDownloadDirectory ?? string.Empty;
            string videoDownloadDirectory = cameraSettings?.VideoDownloadDirectory ?? string.Empty;

            string buttonLabel = cameraSettings != null ? "Save" : "Add";
            string header = cameraSettings != null ? "Edit Camera" : "Add New Camera";

            StringBuilder stb = new StringBuilder();

            stb.Append(PageBuilderAndMenu.clsPageBuilder.FormStart("ftmCameraChange", "IdChange", "Post"));

            stb.Append(@"<div>");
            stb.Append(@"<table class='full_width_table'>");
            stb.Append("<tr height='5'><td></td><td></td></tr>");
            stb.Append(Invariant($"<tr><td class='tableheader' colspan=2>{header}</td></tr>"));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>Name:</td><td class='tablecell'>"));
            stb.Append(HtmlTextBox(nameof(HikCameraSetting.Name), name));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>Camera:</td><td class='tablecell'>"));
            stb.Append(HtmlTextBox(nameof(HikCameraSetting.CameraHost), hostName, size: 75));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>User:</td><td class='tablecell'>"));
            stb.Append(HtmlTextBox(nameof(HikCameraSetting.Login), userId));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>Password:</td><td class='tablecell'>"));
            stb.Append(HtmlTextBox(nameof(HikCameraSetting.Password), password, type: "password"));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>Alarm Cancel Interval(seconds):</td><td class='tablecell'>"));
            stb.Append(HtmlTextBox(nameof(HikCameraSetting.AlarmCancelInterval), alarmCancelInterval));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>Properties Refresh Interval(seconds):</td><td class='tablecell'>"));
            stb.Append(HtmlTextBox(nameof(HikCameraSetting.CameraPropertiesRefreshInterval), propertiesRefreshInterval));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>Snapshot download directory:</td><td class='tablecell'>"));
            stb.Append(HtmlTextBox(nameof(HikCameraSetting.SnapshotDownloadDirectory), snapshotDownloadDirectory));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>Video download directory:</td><td class='tablecell'>"));
            stb.Append(HtmlTextBox(nameof(HikCameraSetting.VideoDownloadDirectory), videoDownloadDirectory));
            stb.Append("</td></tr>");

            stb.Append(Invariant($"<tr><td colspan=2>{HtmlTextBox(RecordId, id, type: "hidden")}<div id='{SaveErrorDivId}' style='color:Red'></div></td><td></td></tr>"));
            stb.Append(Invariant($"<tr><td colspan=2>{FormPageButton(HikSaveCamera, buttonLabel)}"));

            if (cameraSettings != null)
            {
                stb.Append(FormPageButton(HikDeleteCamera, "Delete"));
            }

            stb.Append(FormPageButton(HikCancelCamera, "Cancel"));
            stb.Append(Invariant($"</td></tr>"));
            stb.Append("<tr height='5'><td colspan=2></td></tr>");
            stb.Append(@"</table>");
            stb.Append(@"</div>");
            stb.Append(PageBuilderAndMenu.clsPageBuilder.FormEnd());

            return stb.ToString();
        }

        private string BuildAddNewOnvifCameraWebPageBody([AllowNull]OnvifCameraSetting cameraSettings)
        {
            TimeSpan DefaultAlarmCancelInterval = TimeSpan.FromSeconds(30);
            TimeSpan DefaultCameraPropertiesRefreshInterval = TimeSpan.FromSeconds(60);

            string id = cameraSettings?.Id ?? Guid.NewGuid().ToString();
            string name = cameraSettings?.Name ?? string.Empty;
            string hostName = cameraSettings?.CameraHost ?? @"http://";
            string userId = cameraSettings?.Login ?? string.Empty;
            string password = cameraSettings?.Password ?? string.Empty;
            string alarmCancelInterval = (cameraSettings?.AlarmCancelInterval ?? DefaultAlarmCancelInterval).TotalSeconds.ToString(CultureInfo.InvariantCulture);
            string snapshotDownloadDirectory = cameraSettings?.SnapshotDownloadDirectory ?? string.Empty;

            string buttonLabel = cameraSettings != null ? "Save" : "Add";
            string header = cameraSettings != null ? "Edit Camera" : "Add New Camera";

            StringBuilder stb = new StringBuilder();

            stb.Append(PageBuilderAndMenu.clsPageBuilder.FormStart("ftmCameraChange", "IdChange", "Post"));

            stb.Append(@"<div>");
            stb.Append(@"<table class='full_width_table'>");
            stb.Append("<tr height='5'><td></td><td></td></tr>");
            stb.Append(Invariant($"<tr><td class='tableheader' colspan=2>{header}</td></tr>"));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>Name:</td><td class='tablecell'>"));
            stb.Append(HtmlTextBox(nameof(OnvifCameraSetting.Name), name));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>Camera:</td><td class='tablecell'>"));
            stb.Append(HtmlTextBox(nameof(OnvifCameraSetting.CameraHost), hostName, size: 75));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>User:</td><td class='tablecell'>"));
            stb.Append(HtmlTextBox(nameof(OnvifCameraSetting.Login), userId));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>Password:</td><td class='tablecell'>"));
            stb.Append(HtmlTextBox(nameof(OnvifCameraSetting.Password), password, type: "password"));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>Alarm Cancel Interval(seconds):</td><td class='tablecell'>"));
            stb.Append(HtmlTextBox(nameof(OnvifCameraSetting.AlarmCancelInterval), alarmCancelInterval));
            stb.Append("</td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>Snapshot download directory:</td><td class='tablecell'>"));
            stb.Append(HtmlTextBox(nameof(OnvifCameraSetting.SnapshotDownloadDirectory), snapshotDownloadDirectory));
            stb.Append("</td></tr>");

            stb.Append(Invariant($"<tr><td colspan=2>{HtmlTextBox(RecordId, id, type: "hidden")}<div id='{SaveErrorDivId}' style='color:Red'></div></td><td></td></tr>"));
            stb.Append(Invariant($"<tr><td colspan=2>{FormPageButton(OnvifSaveCamera, buttonLabel)}"));

            if (cameraSettings != null)
            {
                stb.Append(FormPageButton(OnvifDeleteCamera, "Delete"));
            }

            stb.Append(FormPageButton(OnvifCancelCamera, "Cancel"));
            stb.Append(Invariant($"</td></tr>"));
            stb.Append("<tr height='5'><td colspan=2></td></tr>");
            stb.Append(@"</table>");
            stb.Append(@"</div>");
            stb.Append(PageBuilderAndMenu.clsPageBuilder.FormEnd());

            return stb.ToString();
        }

        private string BuildCamerasTab()
        {
            StringBuilder stb = new StringBuilder();

            IncludeResourceCSS(stb, "jquery.dataTables.css");
            IncludeResourceScript(stb, "jquery.dataTables.min.js");

            stb.Append(@"<div>");
            stb.Append(@"<table class='full_width_table'>");
            stb.Append("<tr><td>");

            stb.Append("<table id=\"cameraTable\" class=\"cell-border compact\" style=\"width:100%\">");
            stb.Append(@"<thead><tr>");

            stb.Append(Invariant($"<th>Name</th>"));
            stb.Append(Invariant($"<th>Uri</th>"));
            stb.Append(Invariant($"<th></th>"));

            stb.Append(@"</tr></thead>");
            stb.Append(@"<tbody>");

            foreach (var pair in pluginConfig.AllCameras)
            {
                var id = pair.Key;
                var device = pair.Value;

                stb.Append(@"<tr>");
                stb.Append(Invariant($"<td class='tablecell'>{HtmlEncode(device.Name)}</td>"));
                stb.Append(Invariant($"<td class='tablecell'>{HtmlEncode(device.CameraHost)}</td>"));
                stb.Append("<td class='tablecell'>");

                PageType editType;
                switch (pair.Value)
                {
                    case HikCameraSetting hikCameraSetting:
                        editType = PageType.EditHikvisionIsapiCamera;
                        break;
                    case OnvifCameraSetting onvifCancelCamera:
                        editType = PageType.EditOnvifCamera;
                        break;
                    default:
                        throw new NotImplementedException();
                }

                stb.Append(PageTypeButton(Invariant($"Edit{id}"), "Edit", editType, id: id));
                stb.Append("</td></tr>");
            }
            stb.Append(@"</tbody>");
            stb.Append(@"</table>");

            stb.AppendLine("<script type='text/javascript'>");
            stb.AppendLine(@"$(document).ready(function() {");
            stb.AppendLine(@"$('#cameraTable').DataTable({
                                       'pageLength':10,
                                        'order': [],
                                        'columnDefs': [
                                            { 'className': 'dt-left', 'targets': '_all'}
                                        ],
                                        'columns': [
                                            null,
                                            null,
                                            { 'orderable': false }
                                          ]
                                    });
                                });");
            stb.AppendLine("</script>");

            stb.Append(Invariant($"<tr><td colspan=2>"));
            stb.Append(Invariant($"{PageTypeButton("Add New Hikvision ISAPI Camera", "Add New Hikvision ISAPI Camera", PageType.AddHikvisionIsapiCamera)}"));
            stb.Append(Invariant($"&nbsp;{PageTypeButton("Add ONVIF Camera", "Add ONVIF Camera", PageType.AddOnvifCamera)}"));
            stb.Append(Invariant($"</td></tr>"));

            stb.Append(Invariant($"<tr><td></td></tr>"));
            stb.Append(@"<tr height='5'><td></td></tr>");
            stb.Append(@"</table>");
            stb.Append(@"</div>");

            return stb.ToString();
        }

        /// <summary>
        /// Builds the web page body for the configuration page.
        /// The page has separate forms so that only the data in the appropriate form is returned when a button is pressed.
        /// </summary>
        private string BuildDefaultWebPageBody(NameValueCollection parts)
        {
            UsesJqTabs = true;
            string tab = parts[TabId] ?? "0";
            if (!int.TryParse(tab, out int defaultTab))
            {
                defaultTab = 0;
            }

            int i = 0;
            StringBuilder stb = new StringBuilder();

            var tabs = new clsJQuery.jqTabs("tab1id", PageName);
            var tab1 = new clsJQuery.Tab
            {
                tabTitle = "Settings",
                tabDIVID = Invariant($"tabs{i++}"),
                tabContent = BuildMainSettingTab()
            };
            tabs.tabs.Add(tab1);

            var tab2 = new clsJQuery.Tab
            {
                tabTitle = "Cameras",
                tabDIVID = Invariant($"tabs{i++}"),
                tabContent = BuildCamerasTab()
            };
            tabs.tabs.Add(tab2);

            var tab3 = new clsJQuery.Tab
            {
                tabTitle = "ISAPI Properties",
                tabDIVID = Invariant($"tabs{i++}"),
                tabContent = BuildHikvsionISAPICamerasPropertiesTab()
            };
            tabs.tabs.Add(tab3);

            switch (defaultTab)
            {
                case 0:
                    tabs.defaultTab = tab1.tabDIVID;
                    break;

                case 1:
                    tabs.defaultTab = tab2.tabDIVID;
                    break;

                case 2:
                    tabs.defaultTab = tab3.tabDIVID;
                    break;
            }

            tabs.postOnTabClick = false;
            stb.Append(tabs.Build());

            return stb.ToString();
        }

        private string BuildHikvsionISAPICamerasPropertiesTab()
        {
            StringBuilder stb = new StringBuilder();

            IncludeResourceCSS(stb, "jquery.dataTables.css");
            IncludeResourceScript(stb, "jquery.dataTables.min.js");

            stb.Append(@"<div>");
            stb.Append(@"<table class='full_width_table'>");
            stb.Append("<tr><td>");

            stb.Append("<table id=\"cameraPropertyTable\" class=\"cell-border compact\" style=\"width:100%\">");
            stb.Append(@"<thead><tr>");

            stb.Append(Invariant($"<th>Name</th>"));
            stb.Append(Invariant($"<th>UrlPath</th>"));
            stb.Append(Invariant($"<th>XPath</th>"));
            stb.Append(Invariant($"<th></th>"));

            stb.Append(@"</tr></thead>");
            stb.Append(@"<tbody>");

            foreach (var pair in pluginConfig.HikvisionIsapiCameraProperties)
            {
                var id = pair.Key;
                var cameraProperty = pair.Value;

                stb.Append(@"<tr>");
                stb.Append(Invariant($"<td class='tablecell'>{HtmlEncode(cameraProperty.Name)}</td>"));
                stb.Append(Invariant($"<td class='tablecell'>{HtmlEncode(cameraProperty.UrlPath)}</td>"));
                stb.Append(Invariant($"<td class='tablecell'>{HtmlEncode(cameraProperty.XPathForGet.Path.Expression)}</td>"));
                stb.Append("<td class='tablecell'>");
                stb.Append(PageTypeButton(Invariant($"Edit{id}"), "Edit", PageType.EditHikvisionIsapiCameraProperty, id: id));
                stb.Append("</td></tr>");
            }
            stb.Append(@"</tbody>");
            stb.Append(@"</table>");

            stb.AppendLine("<script type='text/javascript'>");
            stb.AppendLine(@"$(document).ready(function() {");
            stb.AppendLine(@"$('#cameraPropertyTable').DataTable({
                                       'pageLength':10,
                                        'order': [],
                                        'columnDefs': [
                                            { 'className': 'dt-left', 'targets': '_all'}
                                        ],
                                        'columns': [
                                            null,
                                            null,
                                            null,
                                            { 'orderable': false }
                                          ]
                                    });
                                });");
            stb.AppendLine("</script>");

            stb.Append(Invariant($"<tr><td>{PageTypeButton("Add New Camera Property", "Add New Camera Property", PageType.AddHikvisionIsapiCameraProperty)}</td><td></td></tr>"));

            stb.Append(Invariant($"<tr><td></td></tr>"));
            stb.Append(@"<tr height='5'><td></td></tr>");
            stb.Append(@"</table>");
            stb.Append(@"</div>");

            return stb.ToString();
        }

        private string BuildMainSettingTab()
        {
            StringBuilder stb = new StringBuilder();
            stb.Append(PageBuilderAndMenu.clsPageBuilder.FormStart("ftmSettings", "IdSettings", "Post"));

            stb.Append(@"<br>");
            stb.Append(@"<div>");
            stb.Append(@"<table class='full_width_table'>");
            stb.Append("<tr height='5'><td style='width:35%'></td><td style='width:65%'></td></tr>");
            stb.Append(Invariant($"<tr><td class='tablecell'>Debug Logging Enabled:</td><td class='tablecell'>{FormCheckBox(DebugLoggingId, string.Empty, pluginConfig.DebugLogging)}</td ></tr>"));
            stb.Append(Invariant($"<tr><td colspan=2><div id='{ErrorDivId}' style='color:Red'></div></td></tr>"));
            stb.Append(Invariant($"<tr><td colspan=2>{FormButton(SettingSaveButtonName, "Save", "Save Settings")}</td></tr>"));
            stb.Append("<tr height='5'><td colspan=2></td></tr>");
            stb.Append(@" </table>");
            stb.Append(@"</div>");
            stb.Append(PageBuilderAndMenu.clsPageBuilder.FormEnd());

            return stb.ToString();
        }

        private void HandleCameraPropertyPostBack(NameValueCollection parts, string form)
        {
            if (form == NameToIdWithPrefix(HikDeleteCameraProperty))
            {
                pluginConfig.RemoveHikvisionIsapiCameraProperty(parts[RecordId]);
                pluginConfig.FireConfigChanged();
                divToUpdate.Add(SaveErrorDivId, RedirectPageJS(Invariant($"/{pageUrl}?{TabId}=2")));
            }
            else if (form == NameToIdWithPrefix(HikCancelCameraProperty))
            {
                divToUpdate.Add(SaveErrorDivId, RedirectPageJS(Invariant($"/{pageUrl}?{TabId}=2")));
            }
            else if (form == NameToIdWithPrefix(HikSaveCameraProperty))
            {
                StringBuilder results = new StringBuilder();
                string cameraPropertyName = parts[nameof(CameraProperty.Name)];
                if (string.IsNullOrWhiteSpace(cameraPropertyName))
                {
                    results.AppendLine("Name is empty.<br>");
                }

                string cameraPropertyUrlPath = parts[nameof(CameraProperty.UrlPath)];
                if (string.IsNullOrWhiteSpace(cameraPropertyUrlPath))
                {
                    results.AppendLine("UrlPath is empty.<br>");
                }

                string cameraPropertyXPath = parts[nameof(CameraProperty.XPathForGet)];
                if (string.IsNullOrWhiteSpace(cameraPropertyXPath))
                {
                    results.AppendLine("Xpath is empty.<br>");
                }

                try
                {
                    XmlPathData xPath = new XmlPathData(cameraPropertyXPath);
                    var path = xPath.Path;
                }
                catch (Exception)
                {
                    results.AppendLine("XPath is not valid.<br>");
                }

                string stringValues = parts[nameof(CameraProperty.StringValues)];

                if (results.Length > 0)
                {
                    divToUpdate.Add(SaveErrorDivId, results.ToString());
                }
                else
                {
                    string id = parts[RecordId];

                    if (string.IsNullOrWhiteSpace(id))
                    {
                        id = System.Guid.NewGuid().ToString();
                    }

                    var data = new CameraProperty(id,
                                                  cameraPropertyName,
                                                  cameraPropertyUrlPath,
                                                  cameraPropertyXPath,
                                                  stringValues.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries).ToImmutableSortedSet());

                    pluginConfig.AddHikvisionIsapiCameraProperty(data);
                    pluginConfig.FireConfigChanged();
                    divToUpdate.Add(SaveErrorDivId, RedirectPageJS(Invariant($"/{pageUrl}?{TabId}=2")));
                }
            }
        }

        private void HandleHikCameraPostBack(NameValueCollection parts, string form)
        {
            if (form == NameToIdWithPrefix(HikDeleteCamera))
            {
                pluginConfig.RemoveHikvisionIsapiCamera(parts[RecordId]);
                pluginConfig.FireConfigChanged();
                divToUpdate.Add(SaveErrorDivId, RedirectPageJS(Invariant($"/{pageUrl}?{TabId}=1")));
            }
            else if (form == NameToIdWithPrefix(HikCancelCamera))
            {
                divToUpdate.Add(SaveErrorDivId, RedirectPageJS(Invariant($"/{pageUrl}?{TabId}=1")));
            }
            else if (form == NameToIdWithPrefix(HikSaveCamera))
            {
                StringBuilder results = new StringBuilder();
                string cameraName = parts[nameof(HikCameraSetting.Name)];
                if (string.IsNullOrWhiteSpace(cameraName))
                {
                    results.AppendLine("Camera Name is empty.<br>");
                }

                string userId = parts[nameof(HikCameraSetting.Login)];
                string password = parts[nameof(HikCameraSetting.Password)];

                string cameraHostString = parts[nameof(HikCameraSetting.CameraHost)];
                if (!Uri.TryCreate(cameraHostString, UriKind.Absolute, out var cameraHost))
                {
                    results.AppendLine("Camera address is not valid.<br>");
                }

                var alarmCancelIntervalString = parts[nameof(HikCameraSetting.AlarmCancelInterval)];
                if (!long.TryParse(alarmCancelIntervalString, NumberStyles.Any, CultureInfo.InvariantCulture, out var alarmCancelInterval) ||
                    alarmCancelInterval < 0)
                {
                    results.AppendLine("Alarm cancel interval is not valid.<br>");
                }

                var propertiesRefreshIntervalString = parts[nameof(HikCameraSetting.CameraPropertiesRefreshInterval)];
                if (!long.TryParse(propertiesRefreshIntervalString, NumberStyles.Any, CultureInfo.InvariantCulture, out var propertiesRefreshInterval) ||
                    alarmCancelInterval < 0)
                {
                    results.AppendLine("Properties refresh interval is not valid.<br>");
                }

                var snapshotDirectory = parts[nameof(HikCameraSetting.SnapshotDownloadDirectory)];
                if (!Directory.Exists(snapshotDirectory))
                {
                    results.AppendLine("Snapshot directory is not valid.<br>");
                }

                var videoDownloadDirectory = parts[nameof(HikCameraSetting.VideoDownloadDirectory)];
                if (!Directory.Exists(videoDownloadDirectory))
                {
                    results.AppendLine("Video download directory is not valid.<br>");
                }

                if (results.Length > 0)
                {
                    divToUpdate.Add(SaveErrorDivId, results.ToString());
                }
                else
                {
                    string id = parts[RecordId];

                    if (string.IsNullOrWhiteSpace(id))
                    {
                        id = System.Guid.NewGuid().ToString();
                    }

                    var data = new HikCameraSetting(id,
                                                  cameraName,
                                                  cameraHost.AbsoluteUri.ToString(CultureInfo.InvariantCulture),
                                                  userId,
                                                  password,
                                                  TimeSpan.FromSeconds(alarmCancelInterval),
                                                  pluginConfig.HikvisionIsapiCameraProperties,
                                                  TimeSpan.FromSeconds(propertiesRefreshInterval),
                                                  snapshotDirectory,
                                                  videoDownloadDirectory);

                    pluginConfig.AddHikvisionIsapiCamera(data);
                    pluginConfig.FireConfigChanged();
                    divToUpdate.Add(SaveErrorDivId, RedirectPageJS(Invariant($"/{pageUrl}?{TabId}=1")));
                }
            }
        }
        private void HandleOnvifCameraPostBack(NameValueCollection parts, string form)
        {
            if (form == NameToIdWithPrefix(OnvifDeleteCamera))
            {
                pluginConfig.RemoveOnvifCamera(parts[RecordId]);
                pluginConfig.FireConfigChanged();
                divToUpdate.Add(SaveErrorDivId, RedirectPageJS(Invariant($"/{pageUrl}?{TabId}=1")));
            }
            else if (form == NameToIdWithPrefix(OnvifCancelCamera))
            {
                divToUpdate.Add(SaveErrorDivId, RedirectPageJS(Invariant($"/{pageUrl}?{TabId}=1")));
            }
            else if (form == NameToIdWithPrefix(OnvifSaveCamera))
            {
                StringBuilder results = new StringBuilder();
                string cameraName = parts[nameof(OnvifCameraSetting.Name)];
                if (string.IsNullOrWhiteSpace(cameraName))
                {
                    results.AppendLine("Camera Name is empty.<br>");
                }

                string userId = parts[nameof(OnvifCameraSetting.Login)];
                string password = parts[nameof(OnvifCameraSetting.Password)];

                string cameraHostString = parts[nameof(OnvifCameraSetting.CameraHost)];
                if (!Uri.TryCreate(cameraHostString, UriKind.Absolute, out var cameraHost))
                {
                    results.AppendLine("Camera address is not valid.<br>");
                }

                var alarmCancelIntervalString = parts[nameof(OnvifCameraSetting.AlarmCancelInterval)];
                if (!long.TryParse(alarmCancelIntervalString, NumberStyles.Any, CultureInfo.InvariantCulture, out var alarmCancelInterval) ||
                    alarmCancelInterval < 0)
                {
                    results.AppendLine("Alarm cancel interval is not valid.<br>");
                }

                 
                var snapshotDirectory = parts[nameof(OnvifCameraSetting.SnapshotDownloadDirectory)];
                if (!Directory.Exists(snapshotDirectory))
                {
                    results.AppendLine("Snapshot directory is not valid.<br>");
                }

                if (results.Length > 0)
                {
                    divToUpdate.Add(SaveErrorDivId, results.ToString());
                }
                else
                {
                    string id = parts[RecordId];

                    if (string.IsNullOrWhiteSpace(id))
                    {
                        id = System.Guid.NewGuid().ToString();
                    }

                    var data = new OnvifCameraSetting(id,
                                                  cameraName,
                                                  cameraHost.AbsoluteUri.ToString(CultureInfo.InvariantCulture),
                                                  userId,
                                                  password,
                                                  TimeSpan.FromSeconds(alarmCancelInterval),
                                                  snapshotDirectory);

                    pluginConfig.AddOnvifCamera(data);
                    pluginConfig.FireConfigChanged();
                    divToUpdate.Add(SaveErrorDivId, RedirectPageJS(Invariant($"/{pageUrl}?{TabId}=1")));
                }
            }
        }
        private void HandleSaveMainSettingPostBack(NameValueCollection parts)
        {
            StringBuilder results = new StringBuilder();

            // Validate

            if (results.Length > 0)
            {
                divToUpdate.Add(ErrorDivId, results.ToString());
            }
            else
            {
                divToUpdate.Add(ErrorDivId, string.Empty);

                pluginConfig.DebugLogging = parts[DebugLoggingId] == "checked";
                pluginConfig.FireConfigChanged();
            }
        }

        private string PageTypeButton(string name, string label, PageType type, string id = null)
        {
            return PageTypeButton(name, label, type.ToString(), id);
        }

        private const string DebugLoggingId = "DebugLoggingId";
        private const string ErrorDivId = "message_id";
        private const string HikCancelCamera = "CancelCamera";
        private const string HikCancelCameraProperty = "CancelCameraProperty";
        private const string HikDeleteCamera = "DeleteCamera";
        private const string HikDeleteCameraProperty = "DeleteCameraProperty";
        private const string HikSaveCamera = "SaveCamera";
        private const string HikSaveCameraProperty = "SaveCameraProperty";
        private const string SettingSaveButtonName = "SettingSave";
        private const string OnvifCancelCamera = "OnvifCancelCamera";
        private const string OnvifDeleteCamera = "OnvifDeleteCamera";
        private const string OnvifSaveCamera = "OnvifSaveCamera";
        private const string SaveErrorDivId = "SaveErrorDivId";
        private const string TabId = "tab";
        private static readonly string pageName = Invariant($"{PluginData.PlugInName} Configuration").Replace(' ', '_');
        private static readonly string pageUrl = HttpUtility.UrlEncode(pageName);
    }
}